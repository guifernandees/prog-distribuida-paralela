Elapsed Time: 3.055s
    IPC: 2.567
    Average CPU Frequency: 2.994 GHz 
Effective Logical Core Utilization: 2.5% (0.991 out of 40)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization. Consider improving physical core utilization as the first step
 | and then look at opportunities to utilize logical cores, which in some cases
 | can improve processor throughput and overall performance of multi-threaded
 | applications.
 |
    Effective Physical Core Utilization: 5.0% (0.991 out of 20)
     | The metric value is low, which may signal a poor physical CPU cores
     | utilization caused by:
     |     - load imbalance
     |     - threading runtime overhead
     |     - contended synchronization
     |     - thread/process underutilization
     |     - incorrect affinity that utilizes logical cores instead of physical
     |       cores
     | Explore sub-metrics to estimate the efficiency of MPI and OpenMP
     | parallelism or run the Locks and Waits analysis to identify parallel
     | bottlenecks for other parallel runtimes.
     |
Microarchitecture Usage: 56.3% of Pipeline Slots
    Retiring: 56.3% of Pipeline Slots
    Front-End Bound: 2.8% of Pipeline Slots
    Back-End Bound: 39.3% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 11.8% of Pipeline Slots
        Core Bound: 27.5% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
    Bad Speculation: 1.6% of Pipeline Slots
Memory Bound: 11.8% of Pipeline Slots
    L1 Bound: 7.4% of Clockticks
    L2 Bound: N/A with HT on
    L3 Bound: N/A with HT on
    DRAM Bound
        DRAM Bandwidth Bound: 0.0% of Elapsed Time
    Store Bound: 3.1% of Clockticks
    NUMA: % of Remote Accesses: 0.1%
Collection and Platform Info
    Application Command Line: ./pfs 
    Operating System: 6.1.0-23-amd64 12.8
    Computer Name: hype1
    Result Size: 3.5 MB 
    Collection start time: 03:13:32 25/04/2025 UTC
    Collection stop time: 03:13:35 25/04/2025 UTC
    Collector Type: Driverless Perf per-process counting
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.297 GHz 
        Logical CPU Count: 40
        Max DRAM Single-Package Bandwidth: 60.000 GB/s
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: not detected

Recommendations:
    Hotspots: Start with Hotspots analysis to understand the efficiency of your algorithm.
     | Use Hotspots analysis to identify the most time consuming functions.
     | Drill down to see the time spent on every line of code.
    Threading: There is poor utilization of logical CPU cores (2.5%) in your application. 
     |  Use Threading to explore more opportunities to increase parallelism in
     | your application.
    Microarchitecture Exploration: There is low microarchitecture usage (56.3%) of available hardware resources. 
     | Run Microarchitecture Exploration analysis to analyze CPU
     | microarchitecture bottlenecks that can affect application performance.

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
